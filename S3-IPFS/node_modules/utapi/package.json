{
  "_args": [
    [
      {
        "raw": "utapi@github:scality/utapi",
        "scope": null,
        "escapedName": "utapi",
        "name": "utapi",
        "rawSpec": "github:scality/utapi",
        "spec": "github:scality/utapi",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:scality/utapi.git",
          "sshUrl": "git+ssh://git@github.com/scality/utapi.git",
          "httpsUrl": "git+https://github.com/scality/utapi.git",
          "gitUrl": "git://github.com/scality/utapi.git",
          "shortcut": "github:scality/utapi",
          "directUrl": "https://raw.githubusercontent.com/scality/utapi/master/package.json"
        }
      },
      "/Users/hkunduru/Desktop/s3-2"
    ]
  ],
  "_from": "scality/utapi",
  "_id": "utapi@7.0.0",
  "_inCache": true,
  "_location": "/utapi",
  "_phantomChildren": {
    "lodash": "4.17.4"
  },
  "_requested": {
    "raw": "utapi@github:scality/utapi",
    "scope": null,
    "escapedName": "utapi",
    "name": "utapi",
    "rawSpec": "github:scality/utapi",
    "spec": "github:scality/utapi",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:scality/utapi.git",
      "sshUrl": "git+ssh://git@github.com/scality/utapi.git",
      "httpsUrl": "git+https://github.com/scality/utapi.git",
      "gitUrl": "git://github.com/scality/utapi.git",
      "shortcut": "github:scality/utapi",
      "directUrl": "https://raw.githubusercontent.com/scality/utapi/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/scality/utapi.git#394c1019bc4f3109344c2a72034effe461dca003",
  "_shasum": "f7652c8155e6919629facc8dd75fcac24d27435f",
  "_shrinkwrap": null,
  "_spec": "utapi@github:scality/utapi",
  "_where": "/Users/hkunduru/Desktop/s3-2",
  "author": {
    "name": "Scality"
  },
  "bugs": {
    "url": "https://github.com/scality/utapi/issues"
  },
  "dependencies": {
    "arsenal": "github:scality/Arsenal",
    "async": "^2.0.1",
    "ioredis": "^2.3.0",
    "node-schedule": "1.2.0",
    "vaultclient": "github:scality/vaultclient",
    "werelogs": "github:scality/werelogs"
  },
  "description": "API for tracking resource utilization and reporting metrics",
  "devDependencies": {
    "eslint": "^2.4.0",
    "eslint-config-airbnb": "^6.0.0",
    "eslint-config-scality": "github:scality/Guidelines",
    "eslint-plugin-react": "^4.3.0",
    "mocha": "^3.0.2"
  },
  "engines": {
    "node": "6.9.5"
  },
  "gitHead": "394c1019bc4f3109344c2a72034effe461dca003",
  "homepage": "https://github.com/scality/utapi#readme",
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "utapi",
  "optionalDependencies": {},
  "readme": "# utapi\n\n![Utapi logo](res/utapi-logo.png)\n\n[![Circle CI][badgepub]](https://circleci.com/gh/scality/utapi)\n[![Scality CI][badgepriv]](http://ci.ironmann.io/gh/scality/utapi)\n\nService Utilization API for tracking resource usage and metrics reporting\n\n## Design\n\nPlease refer to the [design](/DESIGN.md) for more information.\n\n## Client\n\nThe module exposes a client, named UtapiClient. Projects can use this client to\npush metrics directly to the underlying datastore (Redis) without the need of an\nextra HTTP request to Utapi.\n\n```js\nconst { UtapiClient } = require('utapi');\n\nconst config = {\n    redis: {\n        host: '127.0.0.1',\n        port: 6379\n    },\n    localCache: {\n        host: '127.0.0.1',\n        port: 6379\n    }\n}\nconst c = new UtapiClient(config);\n\n// The second argument to `pushMetric` is a hexadecimal string Request Unique\n// Identifier used for logging.\nc.pushMetric('createBucket', '3d534b1511e5630e68f0', { bucket: 'demo' });\n\nc.pushMetric('putObject', '3d534b1511e5630e68f0', {\n    bucket: 'demo',\n    newByteLength: 1024,\n    oldByteLength: null,\n});\n\nc.pushMetric('putObject', '3d534b1511e5630e68f0', {\n    bucket: 'demo',\n    newByteLength: 1024,\n    oldByteLength: 256,\n});\n\nc.pushMetric('multiObjectDelete', '3d534b1511e5630e68f0', {\n    bucket: 'demo',\n    byteLength: 1024,\n    numberOfObjects: 999,\n});\n```\n\nIf an error occurs during a `pushMetric` call and the client is unable to record\nmetrics in the underlying datastore, metric data is instead stored in a local\nRedis cache. Utapi attempts to push these cached metrics (every five minutes, by\ndefault) using a component named UtapiReplay. If the `pushMetric` call initiated\nby UtapiReplay fails, the metric is reinserted into the local Redis cache. The\nparticularities of this behavior are configurable. For further information, see\n[design](/DESIGN.md).\n\n## Listing Metrics with Utapi\n\nTo make a successful request to Utapi you would need\n\n 1. [IAM user with a policy giving access to Utapi](#iam-user-with-a-policy-giving-access-to-utapi)\n 2. [Sign request with Auth V4](#signing-request-with-auth-v4)\n\n### IAM user with a policy giving access to Utapi\n\nNote: The examples here use AWS CLI but any AWS SDK is capable of these actions.\n\n**endpoint-url:** This would be `https://<host>:<port>` where your Identity(IAM)\nServer is running.\n\n1. Create an IAM user\n\n    ```\n    aws iam --endpoint-url <endpoint> create-user --user-name utapiuser\n    ```\n\n2. Create access key for the user\n\n    ```\n    aws iam --endpoint-url <endpoint> create-access-key --user-name utapiuser\n    ```\n\n3. Define a managed IAM policy\n\n    sample utapi policy\n\n    ```json\n    cat - > utapipolicy.json <<EOF\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Sid\": \"utapiMetrics\",\n                \"Action\": [ \"utapi:ListMetrics\" ],\n                \"Effect\": \"Allow\",\n                \"Resource\": [\n                    \"arn:scality:utapi::012345678901:buckets/*\",\n                    \"arn:scality:utapi::012345678901:accounts/*\",\n                    \"arn:scality:utapi::012345678901:users/*\",\n                ]\n            }\n        ]\n    }\n    EOF\n    ```\n\n    In the above sample, the `Resource` property includes a series of Amazon\n    Resource Names (ARNs) used to define which resources the policy applies to.\n    Thus the sample policy applies to a user with an account ID '012345678901',\n    and grants access to metrics at the levels 'buckets', 'accounts', and\n    'users'.\n\n    The account ID of the ARN can also be omitted, allowing any account to\n    access metrics for those resources. As an example, we can extend the above\n    sample policy to allow any account to access metrics at the level 'service':\n\n    ```json\n    ...\n    \"Resource\": [\n        \"arn:scality:utapi::012345678901:buckets/*\",\n        \"arn:scality:utapi::012345678901:accounts/*\",\n        \"arn:scality:utapi::012345678901:users/*\",\n        \"arn:scality:utapi:::service/*\",\n    ]\n    ...\n    ```\n\n    The omission of a metric level denies a user access to all resources at that\n    level. For example, we can allow access to metrics only at the level\n    'buckets':\n\n    ```json\n    ...\n    \"Resource\": [\"arn:scality:utapi::012345678901:buckets/*\"]\n    ...\n    ```\n\n    Further, access may be limited to specific resources within a metric level.\n    For example, we can allow access to metrics only for a bucket  'foo':\n\n    ```json\n    ...\n    \"Resource\": [\"arn:scality:utapi::012345678901:buckets/foo\"]\n    ...\n    ```\n\n    Or allow access to metrics for the bucket 'foo' for any user:\n\n    ```json\n    ...\n    \"Resource\": [\"arn:scality:utapi:::buckets/foo\"]\n    ...\n    ```\n\n4. Create a managed IAM policy\n\n    Once your IAM policy is defined, create the policy using the following\n    command.\n\n    ```\n    aws iam --endpoint-url <endpoint> create-policy --policy-name utapipolicy \\\n     --policy-document file://utapipolicy.json\n    ```\n\n    A sample output of the above command would look like\n\n    ```json\n    {\n        \"Policy\": {\n            \"PolicyName\": \"utapipolicy\",\n            \"CreateDate\": \"2017-06-01T19:31:18.620Z\",\n            \"AttachmentCount\": 0,\n            \"IsAttachable\": true,\n            \"PolicyId\": \"ZXR6A36LTYANPAI7NJ5UV\",\n            \"DefaultVersionId\": \"v1\",\n            \"Path\": \"/\",\n            \"Arn\": \"arn:aws:iam::0123456789012:policy/utapipolicy\",\n            \"UpdateDate\": \"2017-06-01T19:31:18.620Z\"\n        }\n    }\n    ```\n\n    The arn property of the response, which we call `<policy arn>`, will be used\n    in the next step to attach the policy to the user.\n\n5. Attach user to the managed policy\n\n    ```\n    aws --endpoint-url <endpoint> iam  attach-user-policy --user-name utapiuser\n    --policy-arn <policy arn>\n    ```\n\nNow the user `utapiuser` has access to ListMetrics request in Utapi on all\nbuckets.\n\n### Signing request with Auth V4\n\nThere are two options here.\n\nYou can generate V4 signature using AWS SDKs or the node module aws4. See the\nfollowing urls for reference.\n\n* http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n* http://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html\n* https://github.com/mhart/aws4\n\nYou may also view examples making a request with Auth V4 using various languages\nand AWS SDKs [here](/examples).\n\nAlternatively, you can use a nifty command line tool available in Scality's S3.\n\nYou can git clone S3 repo from here https://github.com/scality/S3.git and follow\nthe instructions in README to install the dependencies.\n\nIf you have S3 running inside a docker container you can docker exec into the S3\ncontainer as\n\n```\ndocker exec -it <container id> bash\n```\n\nand then run the command\n\n```\nnode bin/list_metrics\n```\n\nIt will generate the following output listing available options.\n\n```\nUsage: list_metrics [options]\n\n  Options:\n\n    -h, --help                    output usage information\n    -V, --version                 output the version number\n    -a, --access-key <accessKey>  Access key id\n    -k, --secret-key <secretKey>  Secret access key\n    -m, --metric <metric>         Metric type\n    --buckets <buckets>           Name of bucket(s) with a comma separator if\n                                  more than one\n    --accounts <accounts>         Account ID(s) with a comma separator if more\n                                  than one\n    --users <users>               User ID(s) with a comma separator if more than\n                                  one\n    --service <service>           Name of service\n    -s, --start <start>           Start of time range\n    -r, --recent                  List metrics including the previous and\n                                  current 15 minute interval\n    -e --end <end>                End of time range\n    -h, --host <host>             Host of the server\n    -p, --port <port>             Port of the server\n    --ssl                         Enable ssl\n    -v, --verbose\n```\n\nA typical call to list metrics for a bucket `demo` to Utapi in a https enabled\ndeployment would be\n\n```\nnode bin/list_metrics --metric buckets --buckets demo --start 1476231300000\n--end 1476233099999 -a myAccessKey -k mySecretKey -h 127.0.0.1 -p 8100 --ssl\n```\n\nBoth start and end times are time expressed as UNIX epoch timestamps **expressed\nin milliseconds**.\n\nKeep in mind, since Utapi metrics are normalized to the nearest 15 min.\ninterval, so start time and end time need to be in specific format as follows.\n\n#### Start time\n\nStart time needs to be normalized to the nearest 15 minute interval with seconds\nand milliseconds set to 0. So valid start timestamps would look something like\n`09:00:00:000`, `09:15:00:000`, `09:30:00:000` and `09:45:00:000`.\n\nFor example\n\nDate: Tue Oct 11 2016 17:35:25 GMT-0700 (PDT)\n\nUnix timestamp (milliseconds): 1476232525320\n\nHere's a typical JS method to get start timestamp\n\n```javascript\nfunction getStartTimestamp(t) {\n    const time = new Date(t);\n    const minutes = time.getMinutes();\n    const timestamp = time.setMinutes((minutes - minutes % 15), 0, 0);\n    return timestamp;\n}\n```\n\nThis would format the start time timestamp to `1476231300000`\n\n#### End time\n\nEnd time needs to be normalized to the nearest 15 minute end interval with\nseconds and milliseconds set to 59 and 999 respectively. So valid end timestamps\nwould look something like `09:14:59:999`, `09:29:59:999`, `09:44:59:999` and\n`09:59:59:999`.\n\nHere's a typical JS method to get end timestamp\n\n```javascript\nfunction getEndTimestamp(t) {\n    const time = new Date(t);\n    const minutes = time.getMinutes();\n    const timestamp = time.setMinutes((minutes - minutes % 15) + 15, 0, -1);\n    return timestamp;\n}\n```\n\nThis would format the end time timestamp to `1476233099999`\n\n## Guidelines\n\nPlease read our coding and workflow guidelines at\n[scality/Guidelines](https://github.com/scality/Guidelines).\n\n### Contributing\n\nIn order to contribute, please follow the\n[Contributing Guidelines](\nhttps://github.com/scality/Guidelines/blob/master/CONTRIBUTING.md).\n\n[badgepub]: http://circleci.com/gh/scality/utapi.svg?style=svg\n[badgepriv]: http://ci.ironmann.io/gh/scality/utapi.svg?style=svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/scality/utapi.git"
  },
  "scripts": {
    "ft_test": "mocha --recursive tests/functional",
    "lint": "eslint $(git ls-files '*.js')",
    "lint_md": "mdlint $(git ls-files '*.md')",
    "start": "node index.js",
    "test": "mocha --recursive tests/unit"
  },
  "version": "7.0.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "6.9.5"
      },
      "pkgid": "utapi@7.0.0"
    }
  ]
}
