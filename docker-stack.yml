---
version: "3.1"
services:
  s3-ipfs:
    image: hanuprateek/zenko-ipfs-module
    ports:
      - "9990"
      - "9991"
    networks:
      - backend
    depends_on:
      - ipfs
    environment:
      S3DATAPATH: /data
      S3METADATAPATH: /metadata
      LISTEN_ADDR: 0.0.0.0
    command: npm start
    deploy:
      placement:
        constraints:
          - node.labels.io.zenko.type == storage
  ipfs:
    image: ipfs/go-ipfs
    volumes:
      - /tmp/ipfs_staging:/export
      - /tmp/ipfs_data:/data/ipfs
    ports:
      - "5001:5001"
      - "4001:4001"
      - "8080:8080"
    environment:
      EXTRA_OPTIONS: "-I 10m"
    networks:
      - backend
    deploy:
      mode: replicated
      update_config:
        parallelism: 1
        delay: "10s"
        monitor: "5s"
      placement:
        constraints:
          - node.labels.io.zenko.type == storage
  s3-front:
    image: scality/s3server
    ports:
      - "8000:8000"
    networks:
      - backend
      - frontend-dmz
    environment:
      DATA_HOST: s3-ipfs
      METADATA_HOST: s3-ipfs
      REDIS_HOST: cache
      ENDPOINT: "${ENDPOINT:-zenko}"
    secrets:
      - s3-credentials
    command: npm run start_s3server
    depends_on:
      - s3-ipfs
      - cache
    deploy:
      mode: replicated
      update_config:
        parallelism: 1
        delay: "10s"
        monitor: "5s"
  cache:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - backend
  lb:
    image: zenko/loadbalancer
    ports:
      - "80:80"
    environment:
      LISTEN_PORT: 80
      UPSTREAM_SERVER: "s3-front:8000"
    networks:
      - frontend
      - frontend-dmz
    depends_on:
      - s3-front
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: "10s"
        monitor: "5s"
networks:
  backend:
  frontend:
  frontend-dmz:
volumes:
  s3-ipfs:
secrets:
  s3-credentials:
    file: ./secrets.txt
